/*MOAR S-L SQL movie queries
*/

/* Q1- Find the names of all reviewers who rated Gone with the Wind. 
*/

select distinct(name)
from reviewer
join rating on reviewer.rid = rating.rid 
join movie on rating.mid = movie.mid
where title = 'Gone with the Wind';


/*Q2- For any rating where the reviewer is the same 
as the director of the movie, return the reviewer name, 
movie title, and number of stars.  */

select name, title, stars
from reviewer, movie, rating
where reviewer.rid = rating.rid
and rating.mid = movie.mid
and director = name;

/Q3 *Return all reviewer names and movie names together in a single list, alphabetized. 
(Sorting by the first name of the reviewer and first word in the title is fine; 
no need for special processing on last names or removing "The".) */

select name
from reviewer
union
select title
from movie
order by 1, 1;

/Q4 * Find the titles of all movies not reviewed by Chris Jackson.  */
select title
from movie
where mID not in
(select mID
    from rating 
    where rID in
    (select rID
    from reviewer
    where name = "Chris Jackson"));

/*Q5 For all pairs of reviewers such that both reviewers gave a rating to the same movie, 
return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, 
and include each pair only once. For each pair, return the names in the pair in 
alphabetical order.  */

select distinct rev1.name, rev2.name
from rating R1, rating R2, reviewer rev1, reviewer rev2
where r1.mid = r2.mid
and r1.rid = rev1.rid
and r2.rid = rev2.rid
and rev1.name < rev2.name
order by rev1.name, rev2.name;



/*Q6-For each rating that is the lowest (fewest stars) currently in the database, 
return the reviewer name, movie title, and number of stars.*/
select name, title, stars
from Movie
join Rating USING(mId)
join Reviewer USING(rId)
where stars = (SELECT MIN(stars) FROM Rating);



/*Q7-List movie titles and average ratings, from highest-rated to lowest-rated. 
If two or more movies have the same average rating, list them in alphabetical order. 
 */

select title, avg(stars) as avgst
from movie, rating
where movie.mid = rating.mid
group by movie.mid
order by avgst desc, title;

/* Q8- Find the names of all reviewers who have contributed three or more ratings. 
(As an extra challenge (nope), try writing the query without HAVING or without COUNT.) too bad, I used having and count.
*/

select name
from reviewer
join rating on reviewer.rid = rating.rid
group by rating.rid
having count(*) >=3;




/*Q9- Some directors directed more than one movie. 
For all such directors, return the titles of all movies directed by them, 
along with the director name. Sort by director name, then movie title.*/

select title, director
from movie M1
where (select count(*) from movie M2 where m1.director = m2.director) > 1
order by director, title;



/*Q10- Find the movie(s) with the highest average rating. 
Return the movie title(s) and average rating. 
(Hint: This query is more difficult to write in SQLite than other systems; 
you might think of it as finding the highest average rating and 
then choosing the movie(s) with that average rating.) 
*/

select title, av
from (select title, avg(stars) as av
       from rating 
       join movie using(mid)
       group by mid) a
 where av in (select max(av) 
             from (select title, avg(stars) as av 
                   from rating join movie using(mid) 
                   group by mid))             
                   
                   
/*Q11- same as above, but the lowest avg. rating.*/                


select title, av
from (select title, avg(stars) as av
       from rating 
       join movie using(mid)
       group by mid) a
 where av in (select min(av) 
             from (select title, avg(stars) as av 
                   from rating join movie using(mid) 
                   group by mid))             


/* Q12- For each director, return the director's name together with the title(s) of the movie(s) 
they directed that received the highest rating among all of their movies, and the value of 
that rating. Ignore movies whose director is NULL. */

select distinct (director), title, stars
from (movie join rating using(mid)) m
where stars in
   (select max(stars) from rating
   join movie using(mid) where m.director = director)













